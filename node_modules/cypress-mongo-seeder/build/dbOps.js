"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var mongodb_1 = __importDefault(require("mongodb"));
var lodash_1 = require("lodash");
var json2mongo_1 = require("./json2mongo");
var client;
exports.connectToDB = function (uri) { return __awaiter(_this, void 0, void 0, function () {
    var connectionString, hasScheme, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                connectionString = 'mongodb://localhost/seed_db';
                hasScheme = uri.startsWith('mongodb://') || uri.startsWith('mongodb+srv://');
                if (uri && !hasScheme) {
                    connectionString = "mongodb://" + uri;
                }
                else if (uri && hasScheme) {
                    connectionString = uri;
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, mongodb_1.default.MongoClient.connect(connectionString, {
                        useNewUrlParser: true,
                    })];
            case 2:
                client = _a.sent();
                return [2, true];
            case 3:
                e_1 = _a.sent();
                console.log(e_1);
                return [2, false];
            case 4: return [2];
        }
    });
}); };
exports.isCollectionExists = function (name) { return __awaiter(_this, void 0, void 0, function () {
    var dbCollections;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!client.isConnected()) {
                    console.log('Mongo client not connected!');
                    return [2, false];
                }
                return [4, client
                        .db()
                        .listCollections()
                        .toArray()];
            case 1:
                dbCollections = _a.sent();
                return [2, Boolean(lodash_1.find(dbCollections, { name: name }))];
        }
    });
}); };
exports.insert = function (collection, content, drop) {
    if (drop === void 0) { drop = true; }
    return __awaiter(_this, void 0, void 0, function () {
        var isDropped, isExists, data, inserted, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (content.length < 1) {
                        return [2, false];
                    }
                    if (!client.isConnected()) {
                        console.log('Not inserted. Reason: Mongo client not connected!');
                        return [2, false];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 8, , 9]);
                    isDropped = false;
                    return [4, exports.isCollectionExists(collection)];
                case 2:
                    isExists = _a.sent();
                    if (!(drop && isExists)) return [3, 4];
                    return [4, client.db().dropCollection(collection)];
                case 3:
                    isDropped = _a.sent();
                    if (!isDropped) {
                        console.log("Collection " + collection + " couldn't be dropped.");
                        return [2, false];
                    }
                    _a.label = 4;
                case 4:
                    if (!(!isExists || isDropped)) return [3, 6];
                    return [4, client.db().createCollection(collection)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6:
                    data = content.map(function (val) {
                        return json2mongo_1.json2mongo(val);
                    });
                    return [4, client
                            .db()
                            .collection(collection)
                            .insertMany(data, { bypassDocumentValidation: true })];
                case 7:
                    inserted = _a.sent();
                    return [2, inserted.insertedCount > 0];
                case 8:
                    e_2 = _a.sent();
                    console.log(e_2);
                    return [2, false];
                case 9: return [2];
            }
        });
    });
};
